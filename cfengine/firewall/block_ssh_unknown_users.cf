body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }


bundle agent main {

  commands:
    any::
      "/sbin/iptables-save > $(sys.statedir)/iptables.cfengine"
         contain => in_shell,
         unless => fileexists("$(sys.statedir)/iptables.cfengine"),
         module => "true";

    reload_iptables::
      "/sbin/iptables-restore < $(sys.statedir)/iptables.cfengine"
         contain => in_shell,
         module => "true";


  methods:
    any::
      "ip_blocker"
         if => fileexists("$(sys.statedir)/iptables.cfengine");

  reports:
    reload_iptables::
     "WE MADE REPAIRS!!!";

}

bundle agent ip_blocker {

  vars:
    centos|redhat::
      "logfile"
        string => "/var/log/secure";

    ubuntu::
      "logfile"
        string => "/var/log/auth.log";

  vars:
    any::
      "ips_to_block"
        slist => maplist(
          regex_replace(
            "$(this)",
            ".*\b(\d+\.\d+\.\d+\.\d+)\b.*", # Could also use ".*Invalid user.*from ([0-9.]+) port.*"
            "$1",
            ""
          ),
          grep(
            ".*Invalid user.*",
            readstringlist(
              "$(logfile)",
              "#[^\n]*",
              "[\n]",
              100000000,
              10000000
            )
          )
        );

  files:
    any::
      "$(sys.statedir)/iptables.cfengine"
         edit_line => edit_iptables("$(ips_to_block)");

}

bundle edit_line edit_iptables(bad_ip) {

  insert_lines:

    "-A INPUT -s $(bad_ip)/32 -p tcp -m tcp --dport 22 -j DROP" 
       location => iptables_location,
       classes => if_repaired(reload_iptables) ;

}

body location iptables_location {

      select_line_matching => ":OUTPUT ACCEPT.*";
      before_after => "after";

}
